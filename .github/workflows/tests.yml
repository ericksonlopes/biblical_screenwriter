name: Testes Automatizados

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r pyproject.toml
    
    - name: Executar testes unitários
      run: |
        pytest -v -m "not integration" --cov=src --cov-report=xml
    
    - name: Executar testes de integração
      run: |
        pytest -v -m "integration" --cov=src --cov-report=xml --cov-append
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Executar testes de casos extremos
      run: |
        pytest test_edge_cases.py -v --cov=src --cov-report=xml --cov-append
    
    - name: Gerar relatório de cobertura
      run: |
        coverage html
        coverage report
    
    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload relatório HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Verificar cobertura mínima
      run: |
        coverage report --fail-under=80

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Verificar formatação com Black
      run: |
        black --check --diff src/ test_*.py
    
    - name: Verificar imports com isort
      run: |
        isort --check-only --diff src/ test_*.py
    
    - name: Verificar estilo com flake8
      run: |
        flake8 src/ test_*.py --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Verificar tipos com mypy
      run: |
        mypy src/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Verificar vulnerabilidades de segurança
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Verificar dependências vulneráveis
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload relatórios de segurança
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Executar testes de performance
      run: |
        pytest -v -m "slow" --benchmark-only
    
    - name: Upload benchmark
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/ 